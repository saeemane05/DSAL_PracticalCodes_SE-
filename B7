CONSTRUCT AN EXPRESSION TREE FROM THE GIVEN PREFIX EXPRESSION E.G. +--A*BC/DEF AND 
TRAVERSE IT USING POST-ORDER TRAVERSAL (NON-RECURSIVE) AND THEN DELETE THE ENTIRE TREE.


#include <iostream>
#include <cstring>
#include <stack>
using namespace std ;

struct node
{
char data;
node *left ;
node *right ;
};

class tree
{
public:

char prefix[20] ;

node *top ;
void expression(char prefix[]) ;
void non_rec_postorder(node *temp) ;
void display(node *root);

void del(node *node);

};

class stack1
{

public:

node *data[30] ;

int top;

stack1()
{

top= -1;

}
int empty()
{
if (top==-1)
{
return 1;
return 0 ;
}

}
void push(node *p)
{
data[++top] = p;
}

node *pop()
{
return (data[top--]) ;
}

} ;

void tree::expression(char prefix[])
{
char c ;
stack1 s ;
node *t1 ;
node *t2 ;

int len,i ;

len = strlen(prefix) ;

for(i = len-1; i>=0; i--)
{
top= new node ;
top->left = NULL;
top->right = NULL ;

if (isalpha(prefix[i]))
{
top->data = prefix[i] ;
s.push(top);
}
else if(prefix[i]== '+' || prefix[i]== '*' || prefix[i]=='-' || prefix[i]=='/')
{
t1 = s.pop() ;
t2 = s.pop() ;
top->data = prefix[i] ;
top->left = t2;
top->right = t1 ;
s.push(top) ;

}
}

top = s.pop() ;

}

void tree::non_rec_postorder(node *temp)
{
stack1  s1 , s2 ;
node *T = top ;
cout<<"\n" ;
s1.push(T) ;

while(!s1.empty())
{
T = s1.pop() ;
s2.push(T) ;
if(T->left != NULL)
{
s1.push(T->left) ;
}
if(T->right != NULL)
{
s1.push(T->right) ;
}
}
while(!s2.empty())
{
top = s2.pop() ;
cout<<top->data ;
}
}
void tree::display(node *root)
{
if (root != NULL)
{
cout<<root->data ;
display(root->left) ;
display(root->right) ;

}
}
void tree::del(node *node)
{
if (node==NULL)
return ;
del(node->left) ;
del(node->right) ;
cout<<"DELETED NODE:"<<node->data<<endl ;
free(node) ;

}


int main()
{
char expr[20] ;
tree t ;

cout<<"ENTER PREFIX EXPRESSION:" ;
cin>>expr ;
cout<<expr ;
t.expression(expr) ;

t.display(t.top) ;

cout<<endl ;
t.non_rec_postorder(t.top) ;

t.del(t.top) ;
t.display(t.top) ;

return 0 ;
}

